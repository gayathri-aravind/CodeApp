<?php
// SITE URL: http://codeapp-local:8081/index.php/
defined('BASEPATH') OR exit('No direct script access allowed');

use MiladRahimi\PhpCrypt\Symmetric;
use PHPMailer\PHPMailer\PHPMailer;

require_once(APPPATH.'libraries/miladrahimi/phpcrypt/src/Symmetric.php');


class User extends CI_Controller {

	public function __construct() {

        parent::__construct();
		$this->load->helper('url', 'form');
        $this->load->library('session');
		$this->load->model('UsersModel');
    }

	public function index()
	{
		$this->load->view('user');
	}

	
	public function create(){
		/*
			Store the data in a MySQL DB table in an encrypted format. 
			Use the library miladrahimi/phpcrypt for encryption
			The encryption key should be autogenerated while saving the record
			DB table should contain the encrypted data and record id only. The encryption key should not be saved.
			After successful submission, the record id and encryption key should be displayed to the user
		*/
		// Get the form data
		$user_input=addslashes($this->input->post('user_input'));
		$user_email=addslashes($this->input->post('user_email'));

		// Generate a random encryption key and encrypt the user_input with that key
		$key = Symmetric::generateKey();
		$symmetric = new Symmetric($key);
		$encryptedData = $symmetric->encrypt($user_input);

		// Inserting the recordID and encryptedData into the "MyCstomText" table
		$insertId = $this->UsersModel->insertUserdata($encryptedData, $user_email);
		if($insertId){
			$data['userData'] = array('record_id' => $insertId, 'encryption_key' => $key, 'msg' => 'success');

			/*
				After successful submission, the key should be mailed to the user(get user email as one of the input) via PHPmailer & mailtrap
				Create another page
				to take the record Id and encryption key as input
				Upon submitting, search & retrieve the record from the DB table
				Decrypt the data and display it back to the user
			*/

			// Get user email from the database and pass it to the PHPMailer
			$user_data = $this->UsersModel->getUserData($insertId);

			$this->load->library('email');
			$emailResult = $this->email->send($user_data[0]->email, $key);
			$emailResult = 1; // Hardcoded
			// If email send successfully, redirect to another page to show the decrypted text
			if($emailResult){
				$sessionUserData = array(
					'record_id'  => $insertId,
					'encryption_key'     => $key
				);
				$this->session->set_userdata($sessionUserData);
				$data['userData']['searchLink'] = "<a href=\"http://codeapp-local:8081/index.php/User/getDecyptedInput\">Link</a>";
			}else{
				$data['userData']['searchLink'] = "";
			}
		}else{
			$data['userData'] = array('msg' => 'error');
		}
		$this->load->view('users_create',$data);
	}

	public function getDecyptedInput(){
		// print_r($_SESSION);
		$record_id=$this->session->userdata('record_id');
		$encryption_key=$this->session->userdata('encryption_key');

		if(isset($record_id) && isset($encryption_key)){
			$symmetric = new Symmetric($encryption_key);

			// Get encryptedData for the corresponding encryption key
			$userData = $this->UsersModel->getUserData($record_id);

			$decryptedText = $symmetric->decrypt($userData[0]->encryptedText); 
			$data['userData'] = array('record_id' => $record_id, 'encryption_key' => $encryption_key, 'decryptedText' => $decryptedText);

			$this->load->view('usersearch', $data);

		}
	}
}
